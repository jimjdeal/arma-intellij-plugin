/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kaylerrenslow.armaplugin.lang.sqf;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.kaylerrenslow.armaplugin.lang.sqf.psi.SQFTypes;
import com.kaylerrenslow.armaplugin.lang.sqf.psi.SQFParserDefinition;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SQF.flex</tt>
 */
public class SQFLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14800 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\7\2\10\1\12\1\13\3\0\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\24\1\25\1\26\2"+
    "\24\16\0\1\27\1\14\1\30\1\31\2\20\1\32\11\20\1\33\21\20\1\34\1\35\23\20\1"+
    "\24\1\36\3\20\1\21\1\37\1\36\4\20\1\40\1\41\4\0\1\42\1\43\1\24\3\20\2\44\1"+
    "\24\1\45\1\46\1\0\1\47\5\20\1\50\3\0\1\51\1\52\13\20\1\53\1\42\1\54\1\55\1"+
    "\0\1\56\1\24\1\57\1\60\3\20\3\0\1\61\12\20\1\62\1\0\1\63\1\24\1\0\1\64\3\20"+
    "\1\50\1\65\1\17\2\20\1\62\1\66\1\67\1\70\2\24\3\20\1\71\10\24\1\72\1\25\6"+
    "\24\1\73\2\0\1\74\1\75\6\20\1\76\2\0\1\77\1\20\1\100\1\0\2\36\1\101\1\102"+
    "\1\103\2\20\1\72\1\104\1\105\1\106\1\107\1\57\1\110\1\100\1\0\1\111\1\46\1"+
    "\101\1\112\1\103\2\20\1\72\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\0\1"+
    "\122\1\24\1\101\1\33\1\32\2\20\1\72\1\123\1\105\1\42\1\124\1\125\1\24\1\100"+
    "\1\0\1\37\1\24\1\101\1\102\1\103\2\20\1\72\1\123\1\105\1\106\1\116\1\121\1"+
    "\110\1\100\1\0\1\37\1\24\1\126\1\127\1\130\1\131\1\132\1\127\1\20\1\133\1"+
    "\134\1\135\1\136\1\24\1\121\1\0\1\24\1\37\1\101\1\27\1\72\2\20\1\72\1\137"+
    "\1\140\1\141\1\135\1\142\1\23\1\100\1\0\2\24\1\143\1\27\1\72\2\20\1\72\1\137"+
    "\1\105\1\141\1\135\1\142\1\30\1\100\1\0\1\144\1\24\1\143\1\27\1\72\4\20\1"+
    "\145\1\141\1\146\1\57\1\24\1\100\1\0\1\24\1\35\1\143\1\20\1\21\1\35\2\20\1"+
    "\32\1\147\1\21\1\150\1\151\1\0\2\24\1\152\1\24\1\36\5\20\1\153\1\154\1\155"+
    "\1\74\1\0\1\156\4\24\1\157\1\160\1\161\1\36\1\162\1\163\1\153\1\164\1\165"+
    "\1\166\1\0\1\167\4\24\1\125\2\24\1\156\1\0\1\156\1\170\1\171\1\20\1\36\3\20"+
    "\1\25\1\41\1\0\1\141\1\172\1\0\1\41\3\0\1\45\1\173\7\24\5\20\1\50\1\0\1\174"+
    "\1\0\1\156\1\62\1\175\1\176\1\177\1\200\1\20\1\201\1\202\1\0\1\166\4\20\1"+
    "\33\1\16\5\20\1\203\51\20\1\130\1\21\1\130\5\20\1\130\4\20\1\130\1\21\1\130"+
    "\1\20\1\21\7\20\1\130\10\20\1\204\4\24\2\20\2\24\12\20\1\25\1\24\1\36\114"+
    "\20\1\102\2\20\1\36\2\20\1\44\11\20\1\127\1\125\1\24\1\20\1\27\1\205\1\24"+
    "\2\20\1\205\1\24\2\20\1\206\1\24\1\20\1\27\1\207\1\24\6\20\1\210\3\0\1\211"+
    "\1\212\1\0\1\156\3\24\1\213\1\0\1\156\13\20\1\24\5\20\1\214\10\20\1\215\1"+
    "\24\3\20\1\25\1\0\1\2\1\0\1\2\1\121\1\0\3\20\1\215\1\25\1\24\5\20\1\111\2"+
    "\0\1\52\1\156\1\0\1\156\4\24\2\20\1\155\1\2\6\20\1\172\1\74\3\0\1\106\1\0"+
    "\1\156\1\0\1\156\1\40\13\24\1\216\5\20\1\210\1\0\1\216\1\111\1\0\1\156\1\24"+
    "\1\217\1\2\1\24\1\220\3\20\1\77\1\177\1\0\1\64\4\20\1\62\1\0\1\2\1\24\4\20"+
    "\1\210\2\0\1\24\1\0\1\221\1\0\1\64\3\20\1\215\12\24\1\222\2\0\1\223\1\224"+
    "\1\24\30\20\4\0\1\74\2\24\1\73\42\20\2\215\4\20\2\215\1\20\1\225\3\20\1\215"+
    "\6\20\1\27\1\165\1\226\1\25\1\227\1\111\1\20\1\25\1\226\1\25\1\24\1\217\3"+
    "\24\1\230\1\24\1\40\1\125\1\24\1\231\1\24\1\45\1\232\1\37\1\40\2\24\1\20\1"+
    "\25\3\20\1\44\2\24\1\0\1\45\1\233\1\0\1\234\1\24\1\235\1\35\1\147\1\236\1"+
    "\26\1\237\1\20\1\240\1\241\1\242\2\24\5\20\1\125\116\24\5\20\1\21\5\20\1\21"+
    "\20\20\1\25\1\243\1\244\1\24\4\20\1\33\1\16\7\20\1\40\1\24\1\57\2\20\1\21"+
    "\1\24\10\21\4\0\5\24\1\40\72\24\1\241\3\24\1\36\1\201\1\236\1\25\1\36\11\20"+
    "\1\21\1\245\1\36\12\20\1\203\1\241\4\20\1\215\1\36\12\20\1\21\2\24\3\20\1"+
    "\44\6\24\170\20\1\215\11\24\71\20\1\25\6\24\21\20\1\25\10\24\5\20\1\215\41"+
    "\20\1\25\2\20\1\0\1\244\2\24\5\20\1\155\1\73\1\246\3\20\1\57\12\20\1\156\3"+
    "\24\1\40\1\20\1\35\14\20\1\247\1\111\1\24\1\20\1\44\11\24\1\20\1\250\1\251"+
    "\2\20\1\50\2\24\1\125\6\20\1\111\1\24\1\64\5\20\1\210\1\0\1\45\1\24\1\0\1"+
    "\156\2\0\1\64\1\46\1\0\1\64\2\20\1\62\1\166\2\20\1\155\1\0\1\2\1\24\3\20\1"+
    "\25\1\75\5\20\1\50\1\0\1\234\1\40\1\0\1\156\4\24\5\20\1\77\1\74\1\24\1\251"+
    "\1\252\1\0\1\156\2\20\1\21\1\253\6\20\1\176\1\254\1\214\2\24\1\255\1\20\1"+
    "\50\1\256\1\24\3\257\1\24\2\21\22\24\4\20\1\50\1\260\1\0\1\156\64\20\1\111"+
    "\1\24\2\20\1\21\1\261\5\20\1\111\40\24\55\20\1\215\15\20\1\23\4\24\1\21\1"+
    "\24\1\261\1\262\1\20\1\72\1\21\1\165\1\263\15\20\1\23\3\24\1\261\54\20\1\215"+
    "\2\24\10\20\1\35\6\20\5\24\1\20\1\25\2\0\2\24\1\74\1\24\1\132\2\24\1\241\3"+
    "\24\1\37\1\27\20\20\1\264\1\231\1\24\1\0\1\156\1\36\2\20\1\112\1\36\2\20\1"+
    "\44\1\265\12\20\1\21\3\35\1\266\1\267\2\24\1\270\1\20\1\137\2\20\1\21\2\20"+
    "\1\271\1\20\1\215\1\20\1\215\4\24\17\20\1\44\10\24\6\20\1\25\20\24\1\272\20"+
    "\24\3\20\1\25\6\20\1\125\5\24\3\20\1\21\2\24\3\20\1\44\6\24\3\20\1\215\4\20"+
    "\1\111\1\20\1\236\5\24\23\20\1\215\1\0\1\156\52\24\1\215\1\72\4\20\1\33\1"+
    "\273\2\20\1\215\25\24\2\20\1\215\1\24\3\20\1\23\10\24\7\20\1\265\10\24\1\274"+
    "\1\73\1\137\1\36\2\20\1\111\1\115\4\24\3\20\1\25\20\24\6\20\1\215\1\24\2\20"+
    "\1\215\1\24\2\20\1\44\21\24\11\20\1\125\66\24\1\220\6\20\1\0\1\74\3\24\1\121"+
    "\1\0\2\24\1\220\5\20\1\0\1\275\2\24\3\20\1\125\1\0\1\156\1\220\3\20\1\155"+
    "\1\0\1\141\1\0\10\24\1\220\5\20\1\50\1\0\1\276\1\24\1\0\1\156\24\24\5\20\1"+
    "\50\1\0\1\24\1\0\1\156\46\24\55\20\1\21\22\24\14\20\1\44\63\24\5\20\1\21\72"+
    "\24\7\20\1\125\130\24\10\20\1\25\1\24\1\77\4\0\1\74\1\24\1\57\1\220\1\20\14"+
    "\24\1\23\153\24\1\277\1\300\2\0\1\301\1\2\3\24\1\302\22\24\1\303\67\24\12"+
    "\20\1\27\10\20\1\27\1\304\1\305\1\20\1\306\1\137\7\20\1\33\1\307\2\27\3\20"+
    "\1\310\1\165\1\35\1\72\51\20\1\215\3\20\1\72\2\20\1\203\3\20\1\203\2\20\1"+
    "\27\3\20\1\27\2\20\1\21\3\20\1\21\3\20\1\72\3\20\1\72\2\20\1\203\1\311\6\0"+
    "\1\137\3\20\1\157\1\36\1\203\1\312\1\235\1\313\1\157\1\225\1\157\2\203\1\120"+
    "\1\20\1\32\1\20\1\111\1\314\1\32\1\20\1\111\50\24\32\20\1\21\5\24\106\20\1"+
    "\25\1\24\33\20\1\215\74\24\1\117\3\24\14\0\20\24\36\0\2\24");

  /* The ZZ_CMAP_A table has 1640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\2\1\7\1\6\1\50\1\7\1\5\6\2\4\0\1\7\1\31\1\17\1\3\1\24\1\36\1\34\1\20\1"+
    "\26\1\27\1\22\1\37\1\25\1\13\1\11\1\21\1\14\11\10\1\47\1\45\1\33\1\30\1\32"+
    "\1\46\1\0\4\16\1\12\1\16\11\24\1\15\2\24\1\43\1\23\1\44\1\40\1\1\1\15\2\24"+
    "\1\41\1\35\1\42\1\0\6\2\1\51\2\2\2\0\4\4\4\0\1\4\2\0\1\2\7\0\1\4\4\0\1\4\5"+
    "\0\17\4\1\0\2\4\4\0\4\4\16\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\6\0\1\4\1"+
    "\0\3\4\1\0\1\4\1\0\4\4\1\0\13\4\1\0\3\4\1\0\5\2\2\0\6\4\1\0\7\4\1\0\1\4\15"+
    "\0\1\4\1\0\15\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2\3\4\5\0\5\2\6\0\1\4\4\0\3"+
    "\2\5\0\3\4\7\2\4\0\2\4\1\2\13\4\1\0\1\4\7\2\2\4\2\2\1\0\4\2\2\4\2\2\3\4\2"+
    "\0\1\4\7\0\1\2\1\4\1\2\6\4\3\2\2\0\11\4\3\2\1\4\6\0\2\2\6\4\4\2\2\4\2\0\2"+
    "\2\1\4\11\2\1\4\3\2\1\4\5\2\2\0\1\4\3\2\4\0\1\4\1\0\6\4\4\0\13\2\1\0\4\2\6"+
    "\4\3\2\1\4\2\2\1\4\7\2\2\4\2\2\2\0\2\2\1\0\3\2\1\0\10\4\2\0\2\4\2\0\6\4\1"+
    "\0\1\4\3\0\4\4\2\0\1\2\1\4\7\2\2\0\2\2\2\0\3\2\1\4\5\0\2\4\1\0\5\4\4\0\3\4"+
    "\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7"+
    "\0\4\4\1\0\1\4\7\0\4\2\3\4\1\2\2\0\1\4\1\0\2\4\1\0\3\4\2\2\1\0\3\2\2\0\1\4"+
    "\11\0\1\2\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\2\4\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\4\6\0\1\2\4\4\1\0\5\4\3\0\1\4\7\2\1\0\2"+
    "\2\5\0\2\2\3\0\2\2\1\0\3\4\1\0\2\4\5\0\3\4\2\0\1\4\3\2\1\0\4\2\1\4\1\0\4\4"+
    "\1\0\1\4\4\0\1\2\4\0\6\2\1\0\1\2\3\0\2\2\4\0\1\4\1\2\2\4\7\2\4\0\10\4\3\2"+
    "\7\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\3\4\1\0\1\4\1\0\1\4\2"+
    "\0\2\4\1\0\3\4\2\2\1\0\2\2\1\4\2\0\5\4\1\0\1\4\1\0\6\2\2\0\2\2\2\0\4\4\5\0"+
    "\1\2\1\0\1\2\1\0\1\2\4\0\2\2\5\4\3\2\6\0\1\2\1\0\7\2\1\4\2\2\4\4\3\2\1\4\3"+
    "\2\2\4\7\2\3\4\4\2\5\4\14\2\1\4\1\2\3\4\1\0\7\4\2\0\3\2\2\4\3\2\3\0\2\4\2"+
    "\2\4\0\1\4\1\0\2\2\4\0\4\4\10\2\3\0\1\4\3\0\2\4\1\2\5\0\3\2\2\0\1\4\1\2\1"+
    "\4\5\0\6\4\2\0\5\2\3\4\3\0\10\2\5\4\2\2\3\0\3\4\3\2\1\0\5\2\4\4\1\2\4\4\3"+
    "\2\2\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0\3\4\1\0\6\4\2\0\2\4\2\50\5\2\5"+
    "\0\1\4\5\0\6\2\1\0\1\2\3\0\4\2\11\0\1\4\4\0\1\4\1\0\5\4\2\0\1\4\1\0\4\4\1"+
    "\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\4\4\3\2\2\4\5\0\2\2\2\0\3\4\6\2\1\0\2\4"+
    "\2\0\4\4\1\0\2\4\1\2\3\4\1\2\4\4\1\2\10\4\2\2\4\0\1\4\1\2\4\0\1\2\5\4\2\2"+
    "\3\0\3\4\4\0\3\4\2\2\2\0\6\4\1\0\3\2\1\0\2\2\5\0\5\4\5\0\1\4\1\2\3\4\1\0\2"+
    "\4\1\0\7\4\2\0\1\2\6\0\2\4\2\0\3\4\3\0\2\4\3\0\2\4\2\0\3\2\4\0\3\4\1\0\2\4"+
    "\1\0\1\4\5\0\1\2\2\0\1\4\3\0\1\4\2\0\2\4\3\2\1\0\2\2\1\0\3\2\2\0\1\2\2\0\1"+
    "\2\4\4\10\0\5\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0\3\2\5\0\1\4\2\0\2\4\2\0\4\4\1"+
    "\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4\4\1\0\4\4\2\0\2\2\1\0\1\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\1\0\3\4\1\0\3\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\5\2\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\0"+
    "\1\4\2\0\2\32\2\0\1\33\1\0\1\33\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\4\0\1\4\1\0\1\32\2\44\1\0\1\45\2\0"+
    "\1\4\1\44\1\46\6\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\52\0\u0150\0\u017a\0\u01a4\0\u01ce\0\52\0\52\0\52"+
    "\0\52\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\52"+
    "\0\52\0\52\0\52\0\52\0\52\0\52\0\52\0\52"+
    "\0\52\0\u02f4\0\u031e\0\u0348\0\u0372\0\u0126\0\u039c\0\u03c6"+
    "\0\u03f0\0\u017a\0\u041a\0\u01a4\0\u0444\0\u046e\0\u0498\0\52"+
    "\0\52\0\52\0\52\0\52\0\52\0\52\0\u04c2\0\u04ec"+
    "\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u03f0\0\u0612"+
    "\0\u04ec\0\u063c\0\u0666\0\u0690\0\u06ba\0\52\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\3\6\1\7\1\10"+
    "\1\5\1\11\1\12\2\5\1\13\1\14\1\15\1\16"+
    "\1\2\1\5\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\55\0\2\3\1\42"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\3\3\5\0"+
    "\1\3\1\0\1\43\22\0\1\3\1\0\1\44\6\0"+
    "\1\44\1\0\1\44\1\0\3\44\5\0\1\44\26\0"+
    "\2\5\1\45\1\5\3\0\1\5\1\0\1\5\1\0"+
    "\3\5\5\0\1\5\1\0\1\43\22\0\1\5\5\0"+
    "\3\6\52\0\1\7\1\46\1\47\1\0\1\7\45\0"+
    "\1\50\3\0\1\50\45\0\1\7\1\46\1\47\1\0"+
    "\1\7\1\51\34\0\17\52\1\53\32\52\20\54\1\55"+
    "\31\54\21\0\1\56\1\57\57\0\1\60\51\0\1\61"+
    "\51\0\1\62\1\0\1\63\47\0\1\64\55\0\1\65"+
    "\52\0\1\66\17\0\1\67\46\0\5\70\2\71\14\70"+
    "\1\72\1\70\1\0\24\70\5\44\2\0\14\44\1\73"+
    "\26\44\3\0\1\74\56\0\1\75\2\0\2\75\22\0"+
    "\1\75\22\0\1\50\1\0\1\47\1\0\1\50\45\0"+
    "\1\76\1\0\1\76\1\0\1\77\1\0\1\76\52\0"+
    "\1\52\52\0\1\54\31\0\5\56\2\0\43\56\22\57"+
    "\1\100\27\57\1\0\2\3\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\3\3\5\0\1\3\24\0\1\3"+
    "\5\70\2\71\14\70\1\72\1\70\1\43\1\70\1\101"+
    "\22\70\23\71\1\102\1\71\1\0\24\71\5\70\1\103"+
    "\15\70\1\72\1\70\1\43\1\70\1\101\22\70\5\44"+
    "\1\104\15\44\1\73\26\44\1\0\2\5\1\0\1\5"+
    "\3\0\1\5\1\0\1\5\1\0\3\5\5\0\1\5"+
    "\24\0\1\5\10\0\1\75\3\0\1\75\45\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\33\0\21\57"+
    "\1\106\1\100\27\57\5\71\1\103\1\70\14\71\1\102"+
    "\1\71\1\0\24\71\5\70\1\71\15\70\1\72\1\70"+
    "\1\43\1\70\1\101\22\70\5\44\1\0\15\44\1\73"+
    "\26\44\10\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\43\0\1\110\1\0\1\110\1\0\1\110\1\0"+
    "\1\110\43\0\1\111\1\0\1\111\1\0\1\111\1\0"+
    "\1\111\43\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\43\0\1\113\1\0\1\113\1\0\1\113\1\0"+
    "\1\113\43\0\1\114\1\0\1\114\1\0\1\114\1\0"+
    "\1\114\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\4\1\4\11\6\1\12\11"+
    "\2\0\1\1\2\0\2\1\2\0\1\1\1\0\2\1"+
    "\1\0\7\11\4\0\1\1\1\0\3\1\1\0\1\1"+
    "\2\0\2\1\1\11\5\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQFLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return SQFTypes.LOCAL_VAR;
            } 
            // fall through
          case 40: break;
          case 3: 
            { if(SQFStatic.COMMANDS_SET.contains(yytext().toString())){
        return SQFTypes.COMMAND_TOKEN;
    }

    return SQFTypes.GLOBAL_VAR;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return SQFTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return SQFTypes.MINUS;
            } 
            // fall through
          case 44: break;
          case 7: 
            { return SQFTypes.FSLASH;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return SQFTypes.ASTERISK;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return SQFTypes.COMMA;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return SQFTypes.LPAREN;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return SQFTypes.RPAREN;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return SQFTypes.EQ;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return SQFTypes.EXCL;
            } 
            // fall through
          case 51: break;
          case 14: 
            { return SQFTypes.GT;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return SQFTypes.LT;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return SQFTypes.PERC;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return SQFTypes.PLUS;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return SQFTypes.CARET;
            } 
            // fall through
          case 56: break;
          case 19: 
            { return SQFTypes.L_CURLY_BRACE;
            } 
            // fall through
          case 57: break;
          case 20: 
            { return SQFTypes.R_CURLY_BRACE;
            } 
            // fall through
          case 58: break;
          case 21: 
            { return SQFTypes.L_SQ_BRACKET;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return SQFTypes.R_SQ_BRACKET;
            } 
            // fall through
          case 60: break;
          case 23: 
            { return SQFTypes.SEMICOLON;
            } 
            // fall through
          case 61: break;
          case 24: 
            { return SQFTypes.QUEST;
            } 
            // fall through
          case 62: break;
          case 25: 
            { return SQFTypes.COLON;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return SQFTypes.DEC_LITERAL;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return SQFTypes.STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 28: 
            { return SQFParserDefinition.INLINE_COMMENT;
            } 
            // fall through
          case 66: break;
          case 29: 
            { return SQFTypes.EQEQ;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return SQFTypes.NE;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return SQFTypes.GE;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return SQFTypes.GTGT;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return SQFTypes.LE;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return SQFTypes.AMPAMP;
            } 
            // fall through
          case 72: break;
          case 35: 
            { return SQFTypes.BARBAR;
            } 
            // fall through
          case 73: break;
          case 36: 
            { return SQFTypes.HEX_LITERAL;
            } 
            // fall through
          case 74: break;
          case 37: 
            { String yytext = yytext().toString();
    int parenIndex = yytext.indexOf('(');
    String identifier = yytext.substring(0, parenIndex);
    if(SQFStatic.COMMANDS_SET.contains(identifier)) {
        yypushback(yytext.length() - identifier.length()); //push the (...) back into stream to re-lex
        return SQFTypes.COMMAND_TOKEN;
    } else {
        return SQFTypes.MACRO_FUNC;
    }
            } 
            // fall through
          case 75: break;
          case 38: 
            { return SQFParserDefinition.BLOCK_COMMENT;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
